// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  //schema is db agnostic (i think) so choose whichever provider
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(USER)
  threads       Thread[]
  comments      Post[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}

enum Category {
  PROGRAMMING
  POLITICS
  CRYPTO
  COOKING
  EDUCATION
}

model Thread {
  id        Int   @id @default(sequence())
  category  Category
  title     String
  author    User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    String?
  createdAt DateTime @default(now())
  comments  Post[]
  locked    Boolean  @default(false)
}

model Post {
  id        Int   @id @default(sequence())
  thread    Thread   @relation(fields: [threadId], references: [id], onDelete: Cascade)
  threadId  Int
  author    User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    String?
  replyTo   Post?    @relation("Replies", fields: [replyId], references: [id], onDelete: SetNull)
  replyId   Int?
  replies   Post[]   @relation("Replies")
  createdAt DateTime @default(now())
  content   String
}
